package com.example.chinmakoto.paydayloanserver;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class DAO extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_NUMOFTOKENTRANSACTIONS = "numOfTokenTransactions";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_NONCE = "nonce";

    public static final String FUNC_LOTTERY = "lottery";

    public static final String FUNC_TOKENTRANSACTIONHISTORY = "tokenTransactionHistory";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_CREATELOTTERY = "createLottery";

    public static final String FUNC_RUNLOTTERY = "runLottery";

    public static final String FUNC_RERUNLOTTERY = "rerunLottery";

    public static final String FUNC_VALIDATEWINNER = "validateWinner";

    public static final String FUNC_SENDTOKENSTOWINNER = "sendTokensToWinner";

    public static final String FUNC_TRANSFERTOKENS = "transferTokens";

    public static final String FUNC_GETTOKENBALANCE = "getTokenBalance";

    public static final String FUNC_GETLOTTERYPOOL = "getLotteryPool";

    public static final String FUNC_GETLOTTERYWINNER = "getLotteryWinner";

    public static final String FUNC_GETLOTTERYENTRANCES = "getLotteryEntrances";

    public static final Event LOTTERYWIN_EVENT = new Event("LotteryWin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DRAWWIN_EVENT = new Event("DrawWin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("3", "0x9f870a9bc5b4dd011a9b893971654660130031bf");
        _addresses.put("5777", "0x44a1a320443b27b220a765be4632b726930422cd");
    }

    protected DAO(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DAO(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<BigInteger> numOfTokenTransactions() {
        final Function function = new Function(FUNC_NUMOFTOKENTRANSACTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> nonce() {
        final Function function = new Function(FUNC_NONCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> lottery() {
        final Function function = new Function(FUNC_LOTTERY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<BigInteger, String, String>> tokenTransactionHistory(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENTRANSACTIONHISTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, String>>(
                new Callable<Tuple3<BigInteger, String, String>>() {
                    @Override
                    public Tuple3<BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> token() {
        final Function function = new Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DAO> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _lottery, String _token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_lottery), 
                new org.web3j.abi.datatypes.Address(_token)));
        return deployRemoteCall(DAO.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DAO> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _lottery, String _token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_lottery), 
                new org.web3j.abi.datatypes.Address(_token)));
        return deployRemoteCall(DAO.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<LotteryWinEventResponse> getLotteryWinEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOTTERYWIN_EVENT, transactionReceipt);
        ArrayList<LotteryWinEventResponse> responses = new ArrayList<LotteryWinEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LotteryWinEventResponse typedResponse = new LotteryWinEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._advertiser = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._winner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.pool = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LotteryWinEventResponse> lotteryWinEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LotteryWinEventResponse>() {
            @Override
            public LotteryWinEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOTTERYWIN_EVENT, log);
                LotteryWinEventResponse typedResponse = new LotteryWinEventResponse();
                typedResponse.log = log;
                typedResponse._advertiser = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._winner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.pool = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LotteryWinEventResponse> lotteryWinEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOTTERYWIN_EVENT));
        return lotteryWinEventObservable(filter);
    }

    public List<DrawWinEventResponse> getDrawWinEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DRAWWIN_EVENT, transactionReceipt);
        ArrayList<DrawWinEventResponse> responses = new ArrayList<DrawWinEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DrawWinEventResponse typedResponse = new DrawWinEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._advertiser = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._winner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DrawWinEventResponse> drawWinEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DrawWinEventResponse>() {
            @Override
            public DrawWinEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DRAWWIN_EVENT, log);
                DrawWinEventResponse typedResponse = new DrawWinEventResponse();
                typedResponse.log = log;
                typedResponse._advertiser = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._winner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DrawWinEventResponse> drawWinEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DRAWWIN_EVENT));
        return drawWinEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> createLottery(BigInteger _pool) {
        final Function function = new Function(
                FUNC_CREATELOTTERY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pool)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> runLottery(BigInteger _pool, List<String> _entrances) {
        final Function function = new Function(
                FUNC_RUNLOTTERY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pool), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_entrances, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rerunLottery(BigInteger _pool, List<String> _entrances, String _advertiser) {
        final Function function = new Function(
                FUNC_RERUNLOTTERY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pool), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_entrances, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(_advertiser)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> validateWinner(String _advertiser, Boolean _approval) {
        final Function function = new Function(
                FUNC_VALIDATEWINNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_advertiser), 
                new org.web3j.abi.datatypes.Bool(_approval)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sendTokensToWinner(String _advertiser) {
        final Function function = new Function(
                FUNC_SENDTOKENSTOWINNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_advertiser)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferTokens(String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getTokenBalance(String _of) {
        final Function function = new Function(FUNC_GETTOKENBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_of)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getLotteryPool(String _advertiser) {
        final Function function = new Function(FUNC_GETLOTTERYPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_advertiser)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getLotteryWinner(String _advertiser) {
        final Function function = new Function(FUNC_GETLOTTERYWINNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_advertiser)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getLotteryEntrances(String _advertiser) {
        final Function function = new Function(FUNC_GETLOTTERYENTRANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_advertiser)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static DAO load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DAO(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DAO load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DAO(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class LotteryWinEventResponse {
        public Log log;

        public String _advertiser;

        public String _winner;

        public BigInteger pool;
    }

    public static class DrawWinEventResponse {
        public Log log;

        public String _advertiser;

        public String _winner;
    }
}
